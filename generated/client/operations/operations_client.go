// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCurrentDRUIDS get current d r uids API
*/
func (a *Client) GetCurrentDRUIDS(params *GetCurrentDRUIDSParams) (*GetCurrentDRUIDSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentDRUIDSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentDRUIDs",
		Method:             "GET",
		PathPattern:        "/identifiers/druids",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentDRUIDSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentDRUIDSOK), nil

}

/*
GetIdentifiersInfo get identifiers info API
*/
func (a *Client) GetIdentifiersInfo(params *GetIdentifiersInfoParams) (*GetIdentifiersInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdentifiersInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentifiersInfo",
		Method:             "GET",
		PathPattern:        "/identifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIdentifiersInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentifiersInfoOK), nil

}

/*
GetIdentifiersList get identifiers list API
*/
func (a *Client) GetIdentifiersList(params *GetIdentifiersListParams) (*GetIdentifiersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdentifiersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdentifiersList",
		Method:             "GET",
		PathPattern:        "/identifiers/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIdentifiersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIdentifiersListOK), nil

}

/*
HealthCheck healths check

The healthcheck endpoint provides information about the health of the service.
*/
func (a *Client) HealthCheck(params *HealthCheckParams) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/healthcheck",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HealthCheckOK), nil

}

/*
MintNewDRUIDS mint new d r uids API
*/
func (a *Client) MintNewDRUIDS(params *MintNewDRUIDSParams) (*MintNewDRUIDSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMintNewDRUIDSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mintNewDRUIDs",
		Method:             "POST",
		PathPattern:        "/identifiers/druids",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MintNewDRUIDSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MintNewDRUIDSOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
