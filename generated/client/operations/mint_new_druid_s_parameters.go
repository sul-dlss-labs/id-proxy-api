// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMintNewDRUIDSParams creates a new MintNewDRUIDSParams object
// with the default values initialized.
func NewMintNewDRUIDSParams() *MintNewDRUIDSParams {
	var ()
	return &MintNewDRUIDSParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMintNewDRUIDSParamsWithTimeout creates a new MintNewDRUIDSParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMintNewDRUIDSParamsWithTimeout(timeout time.Duration) *MintNewDRUIDSParams {
	var ()
	return &MintNewDRUIDSParams{

		timeout: timeout,
	}
}

// NewMintNewDRUIDSParamsWithContext creates a new MintNewDRUIDSParams object
// with the default values initialized, and the ability to set a context for a request
func NewMintNewDRUIDSParamsWithContext(ctx context.Context) *MintNewDRUIDSParams {
	var ()
	return &MintNewDRUIDSParams{

		Context: ctx,
	}
}

// NewMintNewDRUIDSParamsWithHTTPClient creates a new MintNewDRUIDSParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMintNewDRUIDSParamsWithHTTPClient(client *http.Client) *MintNewDRUIDSParams {
	var ()
	return &MintNewDRUIDSParams{
		HTTPClient: client,
	}
}

/*MintNewDRUIDSParams contains all the parameters to send to the API endpoint
for the mint new d r uids operation typically these are written to a http.Request
*/
type MintNewDRUIDSParams struct {

	/*Quantity
	  Number of DRUIDs to mint. Default is 1.

	*/
	Quantity *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the mint new d r uids params
func (o *MintNewDRUIDSParams) WithTimeout(timeout time.Duration) *MintNewDRUIDSParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mint new d r uids params
func (o *MintNewDRUIDSParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mint new d r uids params
func (o *MintNewDRUIDSParams) WithContext(ctx context.Context) *MintNewDRUIDSParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mint new d r uids params
func (o *MintNewDRUIDSParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mint new d r uids params
func (o *MintNewDRUIDSParams) WithHTTPClient(client *http.Client) *MintNewDRUIDSParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mint new d r uids params
func (o *MintNewDRUIDSParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQuantity adds the quantity to the mint new d r uids params
func (o *MintNewDRUIDSParams) WithQuantity(quantity *int64) *MintNewDRUIDSParams {
	o.SetQuantity(quantity)
	return o
}

// SetQuantity adds the quantity to the mint new d r uids params
func (o *MintNewDRUIDSParams) SetQuantity(quantity *int64) {
	o.Quantity = quantity
}

// WriteToRequest writes these params to a swagger request
func (o *MintNewDRUIDSParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Quantity != nil {

		// query param quantity
		var qrQuantity int64
		if o.Quantity != nil {
			qrQuantity = *o.Quantity
		}
		qQuantity := swag.FormatInt64(qrQuantity)
		if qQuantity != "" {
			if err := r.SetQueryParam("quantity", qQuantity); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
